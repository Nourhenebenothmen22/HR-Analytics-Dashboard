# -*- coding: utf-8 -*-
"""RH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NXCqllHnNvGY6w1CSGep5Q37BP1NsNZ
"""



import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# =============================================================================
# CONFIGURATION DE L'AFFICHAGE
# =============================================================================
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

# =============================================================================
# CHARGEMENT DES DONNÉES
# =============================================================================

# Charger le CSV depuis GitHub
url = "https://raw.githubusercontent.com/saadqureshi45/DataAnalysis/main/Sample_HR.csv"
df = pd.read_csv(url)

# Afficher les 5 premières lignes
print("=== PREMIÈRES LIGNES DU DATASET ===")
print(df.head())
print("\n" + "="*50 + "\n")

# =============================================================================
# ANALYSE DESCRIPTIVE DE BASE
# =============================================================================

# Nombre de lignes et colonnes
num_rows = df.shape[0]
num_columns = df.shape[1]
print("=== INFORMATIONS GÉNÉRALES ===")
print("Nombre de lignes :", num_rows)
print("Nombre de colonnes :", num_columns)
print("\n" + "="*50 + "\n")

# =============================================================================
# ANALYSE DES DÉPARTEMENTS
# =============================================================================

print("=== ANALYSE PAR DÉPARTEMENT ===")
num_departments = df['Department'].nunique()
print("Nombre de départements :", num_departments)

# Compter les employés par département
dept_counts = df.groupby('Department')['Employee_ID'].count()
print("\nRépartition des employés par département :")
print(dept_counts)
print("\n" + "="*50 + "\n")

# =============================================================================
# ANALYSE DES TYPES DE CONTRAT
# =============================================================================

print("=== ANALYSE DES TYPES DE CONTRAT ===")
contract_types = df['Job Type'].unique()
num_contract_types = df['Job Type'].nunique()
print("Nombre de types de contrat :", num_contract_types)
print("Types de contrat disponibles :", contract_types)

# Répartition des employés par type de contrat
contract_counts = df['Job Type'].value_counts()
print("\nRépartition des employés par type de contrat :")
print(contract_counts)

# =============================================================================
# NOMBRE DE TYPES DE CONTRAT PAR DÉPARTEMENT
# =============================================================================

print("\n=== NOMBRE DE TYPES DE CONTRAT PAR DÉPARTEMENT ===")
contracts_per_dept = df.groupby('Department')['Job Type'].nunique()
print("Nombre de types de contrat par département :")
print(contracts_per_dept)

# Détail des types de contrat par département
print("\n=== DÉTAIL DES TYPES DE CONTRAT PAR DÉPARTEMENT ===")
contracts_detail_per_dept = df.groupby('Department')['Job Type'].value_counts()
print("Répartition détaillée des contrats par département :")
print(contracts_detail_per_dept)
print("\n" + "="*50 + "\n")

# =============================================================================
# STATISTIQUES DE SATISFACTION
# =============================================================================

print("=== STATISTIQUES DE SATISFACTION ===")
satisfaction_mean = df['Job_Satisfaction'].mean()
print("Moyenne de satisfaction au travail :", round(satisfaction_mean, 2))

# Calcul de la moyenne de satisfaction par département
avg_satisfaction = df.groupby('Department')['Job_Satisfaction'].mean()
print("\nMoyenne de satisfaction par département :")
print(avg_satisfaction.round(2))
print("\n" + "="*50 + "\n")

# =============================================================================
# STATISTIQUES SALARIALES
# =============================================================================

print("=== STATISTIQUES SALARIALES ===")
salaire_mean = df['MonthlyIncome'].mean()
print("Salaire mensuel moyen :", round(salaire_mean, 2))

# Calcul de la moyenne des salaires par département
avg_salaire = df.groupby('Department')['MonthlyIncome'].mean()
print("\nMoyenne des salaires par département :")
print(avg_salaire.round(2))
print("\n" + "="*50 + "\n")

# =============================================================================
# STATISTIQUES D'EXPÉRIENCE (CORRIGÉ)
# =============================================================================
print("=== STATISTIQUES D'EXPÉRIENCE ===")
avg_job_experience = df.groupby('Department')['Job Experience'].mean()
print("\nMoyenne de l'expérience par département :")
print(avg_job_experience.round(2))

# =============================================================================
# ANALYSE GÉOGRAPHIQUE COMPLÈTE
# =============================================================================

print("=== ANALYSE GÉOGRAPHIQUE ===")

# Vérification de l'existence de la colonne
if 'Country' in df.columns:
    nombre_pays = df['Country'].nunique()
    pays_uniques = df['Country'].unique()

    print(f"Nombre de pays : {nombre_pays}")
    print(f"Pays représentés : {list(pays_uniques)}")

    # Répartition détaillée
    repartition_pays = df['Country'].value_counts()
    print("\nRépartition des employés par pays :")
    print(repartition_pays)

    # Statistiques par pays
    stats_par_pays = df.groupby('Country').agg({
        'Job_Satisfaction': 'mean',
        'MonthlyIncome': 'mean',
        'Job Experience': 'mean',
        'Employee_ID': 'count'
    }).round(2)

    stats_par_pays.columns = ['Satisfaction_Moyenne', 'Salaire_Moyen', 'Experience_Moyenne', 'Nombre_Employes']
    print("\nStatistiques par pays :")
    print(stats_par_pays)

else:
    print("La colonne 'Country' n'existe pas dans le dataset")
    print("Colonnes disponibles :", df.columns.tolist())

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 1 : NOMBRE D'EMPLOYÉS PAR DÉPARTEMENT
# =============================================================================

plt.figure(figsize=(12, 8))
sns.countplot(data=df, x='Department', order=df['Department'].value_counts().index)
plt.title("Nombre d'employés par département", fontsize=16, fontweight='bold')
plt.xlabel("Département", fontsize=12)
plt.ylabel("Nombre d'employés", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 2 : RÉPARTITION DES TYPES DE CONTRAT
# =============================================================================

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Job Type', order=df['Job Type'].value_counts().index)
plt.title("Répartition des types de contrat", fontsize=16, fontweight='bold')
plt.xlabel("Type de contrat", fontsize=12)
plt.ylabel("Nombre d'employés", fontsize=12)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 3 : RÉPARTITION DE LA SATISFACTION PAR DÉPARTEMENT
# =============================================================================

plt.figure(figsize=(10, 10))
plt.pie(avg_satisfaction.values,
        labels=avg_satisfaction.index,
        autopct='%1.1f%%',
        startangle=140,
        colors=sns.color_palette('pastel'),
        textprops={'fontsize': 12})

plt.title("Répartition de la satisfaction moyenne par département",
          fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 4 : SALAIRES MOYENS PAR DÉPARTEMENT
# =============================================================================

plt.figure(figsize=(12, 8))
sns.barplot(x=avg_salaire.index, y=avg_salaire.values, palette='viridis')
plt.title("Salaire mensuel moyen par département", fontsize=16, fontweight='bold')
plt.xlabel("Département", fontsize=12)
plt.ylabel("Salaire mensuel moyen ($)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 5 : SATISFACTION PAR TYPE DE CONTRAT
# =============================================================================

plt.figure(figsize=(10, 6))
satisfaction_by_contract = df.groupby('Job Type')['Job_Satisfaction'].mean().sort_values(ascending=False)
sns.barplot(x=satisfaction_by_contract.index, y=satisfaction_by_contract.values, palette='coolwarm')
plt.title("Satisfaction moyenne par type de contrat", fontsize=16, fontweight='bold')
plt.xlabel("Type de contrat", fontsize=12)
plt.ylabel("Score de satisfaction moyen", fontsize=12)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 6 : TYPES DE CONTRAT PAR DÉPARTEMENT (HEATMAP)
# =============================================================================

plt.figure(figsize=(12, 8))
contract_dept_cross = pd.crosstab(df['Department'], df['Job Type'])
sns.heatmap(contract_dept_cross, annot=True, fmt='d', cmap='Blues', cbar_kws={'label': 'Nombre d\'employés'})
plt.title("Répartition des types de contrat par département", fontsize=16, fontweight='bold')
plt.xlabel("Type de contrat", fontsize=12)
plt.ylabel("Département", fontsize=12)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 7 : NOMBRE DE TYPES DE CONTRAT PAR DÉPARTEMENT
# =============================================================================

plt.figure(figsize=(12, 8))
contracts_per_dept_sorted = contracts_per_dept.sort_values(ascending=False)
sns.barplot(x=contracts_per_dept_sorted.index, y=contracts_per_dept_sorted.values, palette='rocket')
plt.title("Nombre de types de contrat par département", fontsize=16, fontweight='bold')
plt.xlabel("Département", fontsize=12)
plt.ylabel("Nombre de types de contrat", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 8 : EXPÉRIENCE MOYENNE PAR DÉPARTEMENT
# =============================================================================

plt.figure(figsize=(12, 8))
avg_job_experience_sorted = avg_job_experience.sort_values(ascending=False)
sns.barplot(x=avg_job_experience_sorted.index, y=avg_job_experience_sorted.values, palette='magma')
plt.title("Expérience moyenne par département", fontsize=16, fontweight='bold')
plt.xlabel("Département", fontsize=12)
plt.ylabel("Années d'expérience moyenne", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# VISUALISATION 9 : RÉPARTITION PAR PAYS (SI LA COLONNE EXISTE)
# =============================================================================

if 'Country' in df.columns:
    plt.figure(figsize=(15, 10))

    # Graphique à barres pour la répartition
    plt.subplot(2, 2, 1)
    sns.barplot(x=repartition_pays.index, y=repartition_pays.values, palette='Set2')
    plt.title("Nombre d'employés par pays", fontsize=14, fontweight='bold')
    plt.xlabel("Pays", fontsize=10)
    plt.ylabel("Nombre d'employés", fontsize=10)
    plt.xticks(rotation=45)

    # Graphique circulaire
    plt.subplot(2, 2, 2)
    plt.pie(repartition_pays.values,
            labels=repartition_pays.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=sns.color_palette('pastel'))
    plt.title("Répartition en pourcentage par pays", fontsize=14)

    # Satisfaction par pays
    plt.subplot(2, 2, 3)
    satisfaction_par_pays = df.groupby('Country')['Job_Satisfaction'].mean().sort_values(ascending=False)
    sns.barplot(x=satisfaction_par_pays.index, y=satisfaction_par_pays.values, palette='viridis')
    plt.title("Satisfaction moyenne par pays", fontsize=14, fontweight='bold')
    plt.xlabel("Pays")
    plt.ylabel("Satisfaction moyenne")
    plt.xticks(rotation=45)

    # Salaire par pays
    plt.subplot(2, 2, 4)
    salaire_par_pays = df.groupby('Country')['MonthlyIncome'].mean().sort_values(ascending=False)
    sns.barplot(x=salaire_par_pays.index, y=salaire_par_pays.values, palette='plasma')
    plt.title("Salaire moyen par pays", fontsize=14, fontweight='bold')
    plt.xlabel("Pays")
    plt.ylabel("Salaire moyen ($)")
    plt.xticks(rotation=45)

    plt.tight_layout()
    plt.show()

print("\n" + "="*50 + "\n")

# =============================================================================
# INFORMATIONS SUPPLÉMENTAIRES SUR LE DATASET
# =============================================================================

print("=== INFORMATIONS COMPLÈTES DU DATASET ===")
print(df.info())
print("\n" + "="*50 + "\n")

print("=== STATISTIQUES DESCRIPTIVES ===")
print(df.describe())

print("\n" + "="*50 + "\n")

# =============================================================================
# ANALYSE DES CORRÉLATIONS
# =============================================================================

print("=== MATRICE DE CORRÉLATION ===")
# Sélectionner uniquement les colonnes numériques
numeric_columns = df.select_dtypes(include=[np.number]).columns
correlation_matrix = df[numeric_columns].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.2f')
plt.title("Matrice de corrélation des variables numériques", fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()

print("Matrice de corrélation :")
print(correlation_matrix.round(2))

print("\n" + "="*50 + "\n")

# =============================================================================
# RÉSUMÉ FINAL
# =============================================================================

print("=== RÉSUMÉ FINAL ===")
print(f"• Dataset contenant {num_rows} employés et {num_columns} variables")
print(f"• {num_departments} départements différents")
print(f"• {num_contract_types} types de contrat différents")

if 'Country' in df.columns:
    print(f"• {nombre_pays} pays représentés")

print(f"• Satisfaction moyenne globale : {satisfaction_mean:.2f}/5")
print(f"• Salaire mensuel moyen : ${salaire_mean:.2f}")
print(f"• Expérience moyenne globale : {df['Job Experience'].mean():.2f} années")
print("• Département avec la plus haute satisfaction :", avg_satisfaction.idxmax())
print("• Département avec le salaire moyen le plus élevé :", avg_salaire.idxmax())
print("• Département avec l'expérience moyenne la plus élevée :", avg_job_experience.idxmax())
print("• Type de contrat le plus courant :", contract_counts.index[0])
print("• Département avec le plus de diversité de contrats :", contracts_per_dept.idxmax(), f"({contracts_per_dept.max()} types)")
print("• Département avec le moins de diversité de contrats :", contracts_per_dept.idxmin(), f"({contracts_per_dept.min()} types)")

if 'Country' in df.columns:
    print("• Pays avec le plus d'employés :", repartition_pays.idxmax())
    print("• Pays avec le moins d'employés :", repartition_pays.idxmin())

# Vérification des valeurs manquantes
print("\n=== VALEURS MANQUANTES ===")
missing_values = df.isnull().sum()
print(missing_values[missing_values > 0])